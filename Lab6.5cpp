//1
#include <iostream>
#include <vector>
#include <algorithm>

std::vector<int> intersection(std::vector<int>& list1, std::vector<int>& list2) {
    std::vector<int> result;
    std::sort(list1.begin(), list1.end());
    std::sort(list2.begin(), list2.end());
    std::set_intersection(list1.begin(), list1.end(), list2.begin(), list2.end(), std::back_inserter(result));
    return result;
}
int main() {
    std::vector<int> list1 = {1, 2, 3, 4};
    std::vector<int> list2 = {3, 4, 5, 6};
    std::vector<int> result = intersection(list1, list2);
    for (auto i : result) {
        std::cout << i << " ";
    }
    std::cout << std::endl;
    return 0;
}



//2
#include <iostream>
#include <vector>
#include <string>
using namespace std;

bool is_palindrome(string s) {
    int n = s.size();
    for (int i = 0; i < (n / 2); ++i) {
        if (s[i] != s[n - i - 1]) {
            return false;
        }
    }
    return true;
}

vector<string> filter_palindromes(vector<string> words) {
    vector<string> result;
    for (auto word : words) {
        if (is_palindrome(word)) {
            result.push_back(word);
        }
    }
    return result;
}

int main() {
    vector<string> words = {"racecar", "apple", "level", "banana", "deified"};
    vector<string> palindromes = filter_palindromes(words);
    for (auto palindrome : palindromes) {
        cout << palindrome << endl;
    }
}



//3
#include <iostream>
#include <vector>
using namespace std;

vector<int> sieve_of_eratosthenes(vector<int> nums) {
    vector<int> primes;
    int n = nums.size();
    vector<bool> is_prime(n, true);
    for (int i = 2; i < n; ++i) {
        if (is_prime[i]) {
            primes.push_back(nums[i]);
            for (int j = i * i; j < n; j += i) {
                is_prime[j] = false;
            }
        }
    }
    return primes;
}

int main() {
    vector<int> nums = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    vector<int> primes = sieve_of_eratosthenes(nums);
    for (auto prime : primes) {
        cout << prime << endl;
    }
}



//4
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
using namespace std;

string sort_string(string s) {
    sort(s.begin(), s.end());
    return s;
}

vector<string> anagrams(string word, vector<string> word_list) {
    vector<string> result;
    string sorted_word = sort_string(word);
    for (auto w : word_list) {
        string sorted_w = sort_string(w);
        if (sorted_w == sorted_word) {
            result.push_back(w);
        }
    }
    return result;
}

int main() {
    string word = "listen";
    vector<string> word_list = {"enlists", "google", "inlets", "banana"};
    vector<string> result = anagrams(word, word_list);
    for (auto w : result) {
        cout << w << endl;
    }
}
